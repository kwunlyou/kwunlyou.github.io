---
layout: post
title:  "Numpy Array Indexing"
categories: Python
tags: [Python, Numpy]
excerpt: ""
---
[official docs](https://docs.scipy.org/doc/numpy/reference/arrays.indexing.html)

### Syntax
```python
x[obj]
```
where `x` is a `ndarray` and `obj` is the selection

#### Syntatic sugar in Python

`x[(n1, n2, ..., nk)]` is equivalent to `x[n1, n2, ..., nk]`


### Different Types of Indexing
Depending on `obj`, there are three kinds of indexing
- basic indexing
  - all **arrays** generated by basic indexing are [`views`](https://docs.scipy.org/doc/numpy/glossary.html#term-view) of the original arrays
- advanced indenxing
- field access

### Basic Indexing
- Definition: 
  - if the selection `obj` is 
    - a [`slice`](https://docs.python.org/dev/library/functions.html#slice) object, an integer, or a tuple of slice objects and integers
    - a non-ndarray sequence (e.g., list) containing `slice` objects, `Ellipsis`, or `newaxis`, but not for interger array or other embeded sequence, i.e.,
    ```python
    x[[1, 2, 3]]           # advanced indexing
    x[[1, 2, slice(None)]] # basic indexing
    ```

- `::` is equivalent to `:`, i.e., select all indices along the axis
- `Ellipsis` expends to the number of `:` needed to make the selection object `obj` the same length as the original array, e.g.,
  ```python
  >>> x = np.arange(2 * 3 * 2).reshape(2, 3, 2)
  >>> x
  array([[[ 0,  1],
        [ 2,  3],
        [ 4,  5]],

       [[ 6,  7],
        [ 8,  9],
        [10, 11]]])
  >>> x[..., 1, 0]
  array([2, 8])
  
  ```
- `newaxis` increases the resulting selection by one, e.g.,
  - it create a new axis of length one
  - it is an alias for `None`, `None` can be used to get the same result
  
  ```python
  >>> x = np.arange(3)
  >>> x
  array([0, 1, 2])
  >>> x.shape, x.ndim
  ((3,), 1)
  >>> x[2]
  2
  >>> x[2].shape, x[2].ndim
  ((), 0)
  >>> x[np.newaxis, 2]
  array([2])
  >>> x[np.newaxis, 2].shape, x[np.newaxis, 2].ndim
  ((1,), 1)
  >>> x[None, 2]
  array([2])
  >>> x[None, 2].shape, x[None, 2].ndim
  ((1,), 1)
  ```
- an integer `i` returns the same value as `i:i+1`, except the resulting dimenion is reduced by one, e.g.,
  ```python
  >>> x = np.arange(3)
  >>> x
  array([0, 1, 2])
  >>> x.shape, x.ndim
  ((3,), 1)
  >>> x[1]
  1
  >>> x[1].shape, x[1].ndim
  ((), 0)
  >>> x[1:2]
  array([1])
  >>> x[1:2].shape, x[1:2].ndim
  ((1,), 1)
  ```
- `x[ind1, ... , ind2, ...]` acts like `x[ind1][:, ..., ind2, ...]`
  ```python
  >>> x = np.arange(4 * 5).reshape(4, 5)
  >>> x
  array([[ 0,  1,  2,  3,  4],
  [ 5,  6,  7,  8,  9],
  [10, 11, 12, 13, 14],
  [15, 16, 17, 18, 19]])
  >>> x[2:4][:, 3:5]
  array([[13, 14],
  [18, 19]])
  >>> x[2:4, 3:5]
  array([[13, 14],
  [18, 19]])
  ```
  >??? NOTE: it is not true for advanced slicing

### Advanced Indexing
- Definition:
  - if the selection `obj` is
    - a non-tuple sequence object 
    - an `ndarray` (of integer or bool)
    - a tuple with at least one sequence object or ndarray (of integer or bool)
- advanced indexing always returns a copy of the data
- 

### Questions:
```
x[(1, 2, 3)] and x[1, 2, 3] are basic ??
```

